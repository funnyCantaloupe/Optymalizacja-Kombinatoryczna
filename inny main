#include <cstdlib>
#include <cstdio>
#include <ctime>
#include <iostream>
#include <time.h>
#include <math.h>
#include <vector>

using namespace std;

int main()
{
	//PARAMETRY
	char zasady_azotowe[4] = { 'A', 'T', 'C', 'G' };
	int dlugosc_DNA = 800;
	int dlugosc_okienka = 7;
	float procent_pozytywnych = 0;
	float procent_negatywnych = 0;
	
	//GENEROWANIE LANCUCHA DNA
	vector<char>lancuch_DNA;
	int rand_index;
	srand(time(NULL));
	cout << "Wygenerowany lancuch: " << endl;
	for (int i = 0; i < dlugosc_DNA; i++)
	{
		rand_index = rand() %  + 4;
		lancuch_DNA.push_back(zasady_azotowe[rand_index]);
		cout << lancuch_DNA[i] << " ";
	}

	//GENEROWANIE OKIENEK
	vector<vector<char>>okienka;
	vector<char>okienka_temp;
	int liczba_okienek = dlugosc_DNA - (dlugosc_okienka - 1);
	int index = 0;
	for (int i = 0; i < liczba_okienek; i++) //tyle jest okienek
	{
		index = i;
		for (int j = 0; j < dlugosc_okienka; j++) //taka maja dlugosc okienka
		{
			okienka_temp.push_back(lancuch_DNA[index]);
			index++;
		}
		okienka.push_back(okienka_temp);
		okienka_temp.clear();
	}

	/*
	//Wyswietlanie okienek
	cout << endl;
	for (int i = 0; i < liczba_okienek; i++)
	{
		cout << "Okienko nr: " << i << " | ";
		for (auto it = okienka[i].begin(); it != okienka[i].end(); it++)
		{
			cout << *it;
		}

		cout << endl;
	}*/
	
	//GENEROWANIE BLEDOW NEGATYWNYCH - USUWANIE NUKLEOTYDOW
	float liczba_bledow_negatywnych = round(liczba_okienek * (procent_negatywnych / 100));
	for (int i = 0; i < liczba_bledow_negatywnych; i++)
	{
		rand_index = rand() % + (liczba_okienek-1);
		okienka.erase(okienka.begin() + rand_index); 
		liczba_okienek--;
	}
	dlugosc_DNA = dlugosc_DNA - liczba_bledow_negatywnych;


	//GENEROWANIE BLEDOW POZYTYWNYCH - DODAWANIE NUKLEOTYDOW
	float liczba_bledow_pozytywnych = round(liczba_okienek * (procent_pozytywnych / 100));
	for (int i = 0; i < liczba_bledow_pozytywnych; i++)
	{
		for (int j = 0; j < dlugosc_okienka; j++) //generowanie losowego okienka
		{
			rand_index = rand() % + 4;
			okienka_temp.push_back(zasady_azotowe[rand_index]);
		}
		okienka.push_back(okienka_temp);
		liczba_okienek++;
		okienka_temp.clear();
	}
	dlugosc_DNA = dlugosc_DNA + liczba_bledow_pozytywnych;

	//ROZWIAZANIE LOSOWE - bez wag 
	vector<char>wynik_DNA;

	//Startowy wierzcholek
	for (auto it = okienka[0].begin(); it != okienka[0].end(); it++)
	{
		wynik_DNA.push_back(*it);
	}
	liczba_okienek--;
	okienka.erase(okienka.begin());

	//Kolejne wierzcholki
	int pomoc = 0;
	int pomoc2 = liczba_okienek;

	for (int i = 0; i < pomoc2; i++)
	{
		rand_index = rand() % + (liczba_okienek);
		
		for (auto it = okienka[rand_index].begin(); it != okienka[rand_index].end(); it++)
		{
			if (pomoc == dlugosc_okienka - 1)
			{
				wynik_DNA.push_back(*it);
			}
			pomoc++;
		}
		pomoc = 0;
		okienka.erase(okienka.begin() + rand_index);
		liczba_okienek--;
	}
	
	
	
	//wypisanie wyniku
	cout << endl << endl;
	for (int i = 0; i < dlugosc_DNA; i++)
	{
		cout << wynik_DNA[i] << " ";
	}
	

	return 0;
}//END (main)
